name: Tests (fork, macOS + testmon)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NO_AT_BRIDGE: 1
  OPENBLAS_NUM_THREADS: 1
  PYTHONFAULTHANDLER: 1
  TESTMON_SERVER: "https://ezmon.aloiz.ch"

jobs:
  test:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }} (testmon)"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14   # Apple Silicon
            python-version: '3.11'
          - os: macos-14   # Apple Silicon
            python-version: '3.12'
          - os: macos-15   # Apple Silicon
            python-version: '3.13'

    # Shared env per-job (unique JOB_ID per matrix entry)
    env:
      REPO_ID: ${{ github.repository }}
      JOB_ID: "${{ matrix.os }}-py${{ matrix.python-version }}"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: "pip"
          cache-dependency-path: |
            requirements/testing/all.txt
            requirements/testing/minver.txt
            pyproject.toml

      # Restore MPL cache
      - name: Restore Matplotlib cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.matplotlib
          key: mpl-${{ runner.os }}-py${{ matrix.python-version }}
          restore-keys: |
            mpl-${{ runner.os }}-py${{ matrix.python-version }}-
            mpl-${{ runner.os }}-

      - name: Homebrew manifest
        run: |
          cat > .github/brew-formulae.txt <<'EOF'
          ccache
          ninja
          gobject-introspection
          gtk4
          imagemagick
          EOF

      # Restore bottle downloads (not installs)
      - name: Restore Homebrew downloads
        uses: actions/cache/restore@v4
        with:
          path: $HOME/.brew-cache
          key: brew-${{ runner.os }}-${{ hashFiles('.github/brew-formulae.txt') }}
          restore-keys: |
            brew-${{ runner.os }}-

      - name: Set HOMEBREW_CACHE
        run: |
          mkdir -p "$HOME/.brew-cache"
          echo "HOMEBREW_CACHE=$HOME/.brew-cache" >> $GITHUB_ENV

      - name: Install OS packages (Homebrew)
        run: |
          set -euo pipefail
          brew update
          xargs brew install < .github/brew-formulae.txt || true
          echo "Cache dir: $HOMEBREW_CACHE"
          find "$HOMEBREW_CACHE" -maxdepth 2 -type f -ls | head -n 50 || true

      # Save bottle downloads for next run
      - name: Save Homebrew downloads
        if: always()
        uses: actions/cache/save@v4
        with:
          path: $HOME/.brew-cache
          key: brew-${{ runner.os }}-${{ hashFiles('.github/brew-formulae.txt') }}

      - name: Install Python dependencies
        run: |
          # Core build + runtime deps (condensed from upstream)
          python -m pip install --upgrade \
            'contourpy>=1.0.1' cycler fonttools kiwisolver packaging pillow \
            'pyparsing!=3.1.0' python-dateutil setuptools-scm \
            'meson-python>=0.13.1' 'pybind11>=2.13.2'
          # Full test requirements
          python -m pip install -r requirements/testing/all.txt
          # Test runner + testmon
          python -m pip install pytest pytest-testmon
          # Optional: Sphinx for sphinxext tests (harmless if present)
          python -m pip install 'sphinx!=6.1.2'

      - name: Install Matplotlib (editable, Agg backend)
        run: |
          python -m pip install --no-deps --no-build-isolation --verbose \
            --config-settings=setup-args="-DrcParams-backend=Agg" \
            --editable .[dev]

      - name: Download testmon data from server
        run: |
          set -euo pipefail
          echo "üì• Downloading testmon data for ${REPO_ID}/${JOB_ID}..."
          HTTP_CODE=$(curl -w "%{http_code}" -o .testmondata -f -L \
            "${TESTMON_SERVER}/api/client/download?repo_id=${REPO_ID}&job_id=${JOB_ID}" \
            2>/dev/null || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Downloaded existing testmon data"
            ls -lh .testmondata
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "‚ÑπÔ∏è  No existing testmon data found (first run for this job is OK)"
          else
            echo "‚ö†Ô∏è  Failed to download testmon data (HTTP $HTTP_CODE)"
            echo "   Proceeding without testmon warm cache"
          fi

      - name: Debug testmon cache + env
        env:
          TESTMON_DATAFILE: ".testmondata"
        run: |
          set -euo pipefail
          echo "pythonLocation: ${{ env.pythonLocation }}"
          export PATH="${{ env.pythonLocation }}/bin:$PATH"

          echo "PWD: $(pwd)"
          python -V
          which python
          python -c "import sys,pytest; print('sys.executable:', sys.executable); print('pytest:', getattr(pytest,'__file__','<no file>'))"

          echo "Repo root listing:"
          ls -la

          echo "Check .testmondata existence & size:"
          if [ -f .testmondata ]; then
            ls -lh .testmondata
            file .testmondata || true
            sqlite3 .testmondata ".tables" || true
            sqlite3 .testmondata ".schema" | head -n 60 || true
          else
            echo "‚ö†Ô∏è  .testmondata not found"
          fi
      
      

      # Better debug: use the exact interpreter from setup-python
      - name: Debug Python location + pytest
        run: |
          echo "pythonLocation: ${{ env.pythonLocation }}"
          ${{ env.pythonLocation }}/bin/python -V
          ${{ env.pythonLocation }}/bin/python -c "import sys,pytest; print('sys.executable:', sys.executable); print('pytest:', getattr(pytest,'__file__','<no file>'))"

      - name: Compare pip freeze vs DB environment
        run: |
          set -euo pipefail
          echo "=== Current pip freeze (sorted) ==="
          ${{ env.pythonLocation }}/bin/python -m pip freeze | sort > /tmp/pip_freeze.txt
          cat /tmp/pip_freeze.txt | head -n 200
      
          echo "=== DB environment row(s) ==="
          sqlite3 .testmondata "SELECT id,environment_name,python_version,substr(system_packages,1,2000) FROM environment;" || true
      
          echo "=== Diff (DB vs current) ==="
          # dump DB system_packages to /tmp/db_freeze.txt (one pkg per line)
          sqlite3 -csv .testmondata "SELECT system_packages FROM environment LIMIT 1;" 2>/dev/null \
            | sed 's/\r//g' | tr ';' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sort > /tmp/db_freeze.txt || true
          if [ -s /tmp/db_freeze.txt ]; then
            diff -u /tmp/db_freeze.txt /tmp/pip_freeze.txt || true
          else
            echo "(No system_packages recorded in DB, or query failed.)"
          fi


      # Optional: collect-only to see discovered tests (doesn't run them)
      - name: Pytest collect-only (visibility)
        run: |
          ${{ env.pythonLocation }}/bin/python -m pytest --testmon -rA -vv -s --maxfail=1

      # Quick ‚Äúlisting‚Äù pass (minimal output of selected tests)
      - name: Pytest short listing
        run: |
          ${{ env.pythonLocation }}/bin/python -m pytest --testmon || true

      # Full run with verbosity and live output
      - name: Run tests (pytest + testmon, verbose)
        env:
          TESTMON_DATAFILE: ".testmondata"
          TESTMON_ENVIRONMENT_NAME: "${{ matrix.os }}-py${{ matrix.python-version }}"
        run: |
          ${{ env.pythonLocation }}/bin/python -m pytest --testmon -vv -s -rA
      
      

      - name: Upload testmon data to server
        if: always()
        run: |
          set -euo pipefail
          if [ ! -f .testmondata ]; then
            echo "‚ö†Ô∏è  No .testmondata file found to upload"
            exit 0
          fi
          echo "üì§ Uploading testmon data for ${REPO_ID}/${JOB_ID}..."
          HTTP_CODE=$(curl -w "%{http_code}" -o /tmp/upload_response.json \
            -X POST "${TESTMON_SERVER}/api/client/upload" \
            -F "file=@.testmondata" \
            -F "repo_id=${REPO_ID}" \
            -F "job_id=${JOB_ID}" \
            -F "repo_name=${{ github.repository }}" \
            2>/dev/null || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Successfully uploaded testmon data"
            python -m json.tool /tmp/upload_response.json 2>/dev/null || cat /tmp/upload_response.json
          else
            echo "‚ö†Ô∏è  Failed to upload testmon data (HTTP $HTTP_CODE)"
            cat /tmp/upload_response.json 2>/dev/null || true
          fi

      # Ensure dir exists; warm it so it's non-empty
      - name: Warm up Matplotlib cache
        run: |
          mkdir -p ~/.matplotlib
          ${{ env.pythonLocation }}/bin/python - <<'PY'
          import matplotlib as mpl, matplotlib.pyplot as plt
          print("mpl cachedir:", mpl.get_cachedir())
          fig, ax = plt.subplots(); ax.plot([0,1],[0,1]); fig.canvas.draw()
          PY
          ls -la ~/.matplotlib || true

      # Save MPL cache
      - name: Save Matplotlib cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.matplotlib
          key: mpl-${{ runner.os }}-py${{ matrix.python-version }}
