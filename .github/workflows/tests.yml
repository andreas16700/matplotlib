name: Tests (fork, macOS + testmon)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NO_AT_BRIDGE: 1
  OPENBLAS_NUM_THREADS: 1
  PYTHONFAULTHANDLER: 1
  TESTMON_SERVER: "https://ezmon.aloiz.ch"

jobs:
  test:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }} (testmon)"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14   # Apple Silicon
            python-version: '3.11'
          - os: macos-14   # Apple Silicon
            python-version: '3.12'
          - os: macos-15   # Apple Silicon
            python-version: '3.13'

    # Shared env per-job (unique JOB_ID per matrix entry)
    env:
      REPO_ID: ${{ github.repository }}
      JOB_ID: "${{ matrix.os }}-py${{ matrix.python-version }}"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: "pip"
          cache-dependency-path: |
            requirements/testing/all.txt
            requirements/testing/minver.txt
            pyproject.toml

      - name: Cache Matplotlib data
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/matplotlib
            !~/.cache/matplotlib/tex.cache
            !~/.cache/matplotlib/test_cache
          key: mpl-${{ runner.os }}-py${{ matrix.python-version }}-${{ github.ref }}
          restore-keys: |
            mpl-${{ runner.os }}-py${{ matrix.python-version }}-
            mpl-${{ runner.os }}-

      - name: Install OS packages (Homebrew)
        run: |
          set -euo pipefail
          brew update
          # Minimal native deps to build and run tests headless (Agg backend).
          brew install ccache ninja gobject-introspection gtk4 imagemagick || true

      - name: Upgrade pip tooling
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Python dependencies
        run: |
          # Core build + runtime deps (condensed from upstream)
          python -m pip install --upgrade \
            'contourpy>=1.0.1' cycler fonttools kiwisolver packaging pillow \
            'pyparsing!=3.1.0' python-dateutil setuptools-scm \
            'meson-python>=0.13.1' 'pybind11>=2.13.2'
          # Full test requirements
          python -m pip install -r requirements/testing/all.txt
          # Test runner + testmon
          python -m pip install pytest pytest-testmon
          # Optional: Sphinx for sphinxext tests (harmless if present)
          python -m pip install 'sphinx!=6.1.2'

      - name: Install Matplotlib (editable, Agg backend)
        run: |
          python -m pip install --no-deps --no-build-isolation --verbose \
            --config-settings=setup-args="-DrcParams-backend=Agg" \
            --editable .[dev]

      - name: Download testmon data from server
        run: |
          set -euo pipefail
          echo "📥 Downloading testmon data for ${REPO_ID}/${JOB_ID}..."
          HTTP_CODE=$(curl -w "%{http_code}" -o .testmondata -f -L \
            "${TESTMON_SERVER}/api/client/download?repo_id=${REPO_ID}&job_id=${JOB_ID}" \
            2>/dev/null || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Downloaded existing testmon data"
            ls -lh .testmondata
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "ℹ️  No existing testmon data found (first run for this job is OK)"
          else
            echo "⚠️  Failed to download testmon data (HTTP $HTTP_CODE)"
            echo "   Proceeding without testmon warm cache"
          fi

      - name: Run tests (pytest + testmon)
        run: |
          # Keep it simple; you can switch to the upstream flags later if you want.
          pytest --testmon -q

      - name: Upload testmon data to server
        if: always()
        run: |
          set -euo pipefail
          if [ ! -f .testmondata ]; then
            echo "⚠️  No .testmondata file found to upload"
            exit 0
          fi
          echo "📤 Uploading testmon data for ${REPO_ID}/${JOB_ID}..."
          HTTP_CODE=$(curl -w "%{http_code}" -o /tmp/upload_response.json \
            -X POST "${TESTMON_SERVER}/api/client/upload" \
            -F "file=@.testmondata" \
            -F "repo_id=${REPO_ID}" \
            -F "job_id=${JOB_ID}" \
            -F "repo_name=${{ github.repository }}" \
            2>/dev/null || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Successfully uploaded testmon data"
            python -m json.tool /tmp/upload_response.json 2>/dev/null || cat /tmp/upload_response.json
          else
            echo "⚠️  Failed to upload testmon data (HTTP $HTTP_CODE)"
            cat /tmp/upload_response.json 2>/dev/null || true
          fi
